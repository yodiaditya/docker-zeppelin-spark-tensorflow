{
  "paragraphs": [
    {
      "text": "%pyspark\n!pip install rankfm",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 20:06:38.949",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Traceback (most recent call last):\n  File \"/tmp/python8166131365034144374/zeppelin_python.py\", line 152, in \u003cmodule\u003e\n    code \u003d compile(\u0027\\n\u0027.join(stmts), \u0027\u003cstdin\u003e\u0027, \u0027exec\u0027, ast.PyCF_ONLY_AST, 1)\n  File \"\u003cstdin\u003e\", line 2\n    !pip install rankfm\n    ^\nSyntaxError: invalid syntax\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712562801660_581737404",
      "id": "paragraph_1712562801660_581737404",
      "dateCreated": "2024-04-08 07:53:21.660",
      "dateStarted": "2024-04-08 20:06:38.952",
      "dateFinished": "2024-04-08 20:06:38.959",
      "status": "ERROR"
    },
    {
      "text": "%pyspark\nimport pandas as pd\n\nfrom rankfm.rankfm import RankFM\nfrom rankfm.evaluation import hit_rate, reciprocal_rank, discounted_cumulative_gain, precision, recall, diversity\n\nimport warnings\n# warnings.filterwarnings(\"ignore\", category\u003dnb.NumbaPerformanceWarning)\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 20:07:19.656",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712562729139_877933842",
      "id": "paragraph_1712562729139_877933842",
      "dateCreated": "2024-04-08 07:52:09.139",
      "dateStarted": "2024-04-08 20:07:19.658",
      "dateFinished": "2024-04-08 20:07:27.627",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nratings \u003d spark.read.option(\"header\", True).option(\"delimiter\", \",\").csv(\"/data/ml-25m/ratings.csv\")\nratings.show(5)",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 20:07:29.417",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+------+-------+------+----------+\n|userId|movieId|rating| timestamp|\n+------+-------+------+----------+\n|     1|    296|   5.0|1147880044|\n|     1|    306|   3.5|1147868817|\n|     1|    307|   5.0|1147868828|\n|     1|    665|   5.0|1147878820|\n|     1|    899|   3.5|1147868510|\n+------+-------+------+----------+\nonly showing top 5 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin.local:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://zeppelin.local:4040/jobs/job?id\u003d1"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712562797380_369143858",
      "id": "paragraph_1712562797380_369143858",
      "dateCreated": "2024-04-08 07:53:17.380",
      "dateStarted": "2024-04-08 20:07:29.420",
      "dateFinished": "2024-04-08 20:07:31.464",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nimport sys\nprint(sys.path)",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 20:07:40.555",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[\u0027/tmp/python5488515980996857410\u0027, \u0027/tmp/spark-52bc4738-2b88-4d01-8f6f-6f18218b5edb/userFiles-8867edc6-365f-46c0-93b9-e0fe0a146993\u0027, \u0027/opt/bitnami/spark/python/lib/py4j-0.10.9-src.zip\u0027, \u0027/opt/bitnami/spark/python\u0027, \u0027/opt/zeppelin\u0027, \u0027/tmp/python5488515980996857410\u0027, \u0027/opt/conda/envs/python_3_with_R/lib/python38.zip\u0027, \u0027/opt/conda/envs/python_3_with_R/lib/python3.8\u0027, \u0027/opt/conda/envs/python_3_with_R/lib/python3.8/lib-dynload\u0027, \u0027/opt/zeppelin/.local/lib/python3.8/site-packages\u0027, \u0027/opt/conda/envs/python_3_with_R/lib/python3.8/site-packages\u0027, \u0027/opt/zeppelin/interpreter/spark/spark-interpreter-0.10.1.jar\u0027]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712606852820_128232198",
      "id": "paragraph_1712606852820_128232198",
      "dateCreated": "2024-04-08 20:07:32.820",
      "dateStarted": "2024-04-08 20:07:40.557",
      "dateFinished": "2024-04-08 20:07:40.564",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nratings_pd \u003d ratings.toPandas()",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 19:29:41.063",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin.local:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712598904909_1788338325",
      "id": "paragraph_1712598904909_1788338325",
      "dateCreated": "2024-04-08 17:55:04.909",
      "dateStarted": "2024-04-08 19:29:41.065",
      "dateFinished": "2024-04-08 19:29:27.459",
      "status": "ABORT"
    },
    {
      "text": "%pyspark\nuser_features \u003d spark.read.option(\"header\", True).option(\"delimiter\", \"::\").csv(\"/data/users.dat\")\nuser_features.occupation \u003d user_features.occupation.astype(\u0027str\u0027)\nuser_features.age \u003d user_features.age.astype(\u0027str\u0027)\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 11:02:34.360",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mAnalysisException\u001b[0m                         Traceback (most recent call last)\nCell \u001b[0;32mIn[350], line 1\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0m user_features \u001b[38;5;241m\u003d\u001b[39m \u001b[43mspark\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mread\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moption\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mheader\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moption\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdelimiter\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m::\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcsv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m/data/users.dat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m user_features\u001b[38;5;241m.\u001b[39moccupation \u001b[38;5;241m\u003d\u001b[39m user_features\u001b[38;5;241m.\u001b[39moccupation\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;124m\u0027\u001b[39m\u001b[38;5;124mstr\u001b[39m\u001b[38;5;124m\u0027\u001b[39m)\n\u001b[1;32m      3\u001b[0m user_features\u001b[38;5;241m.\u001b[39mage \u001b[38;5;241m\u003d\u001b[39m user_features\u001b[38;5;241m.\u001b[39mage\u001b[38;5;241m.\u001b[39mastype(\u001b[38;5;124m\u0027\u001b[39m\u001b[38;5;124mstr\u001b[39m\u001b[38;5;124m\u0027\u001b[39m)\n\nFile \u001b[0;32m/opt/bitnami/spark/python/lib/pyspark.zip/pyspark/sql/readwriter.py:737\u001b[0m, in \u001b[0;36mDataFrameReader.csv\u001b[0;34m(self, path, schema, sep, encoding, quote, escape, comment, header, inferSchema, ignoreLeadingWhiteSpace, ignoreTrailingWhiteSpace, nullValue, nanValue, positiveInf, negativeInf, dateFormat, timestampFormat, maxColumns, maxCharsPerColumn, maxMalformedLogPerPartition, mode, columnNameOfCorruptRecord, multiLine, charToEscapeQuoteEscaping, samplingRatio, enforceSchema, emptyValue, locale, lineSep, pathGlobFilter, recursiveFileLookup, modifiedBefore, modifiedAfter, unescapedQuoteHandling)\u001b[0m\n\u001b[1;32m    735\u001b[0m     path \u001b[38;5;241m\u003d\u001b[39m [path]\n\u001b[1;32m    736\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mtype\u001b[39m(path) \u001b[38;5;241m\u003d\u003d\u001b[39m \u001b[38;5;28mlist\u001b[39m:\n\u001b[0;32m--\u003e 737\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_df(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_jreader\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcsv\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_spark\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_sc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_jvm\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mPythonUtils\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtoSeq\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    738\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(path, RDD):\n\u001b[1;32m    739\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mfunc\u001b[39m(iterator):\n\nFile \u001b[0;32m/opt/bitnami/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py:1304\u001b[0m, in \u001b[0;36mJavaMember.__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1298\u001b[0m command \u001b[38;5;241m\u003d\u001b[39m proto\u001b[38;5;241m.\u001b[39mCALL_COMMAND_NAME \u001b[38;5;241m+\u001b[39m\\\n\u001b[1;32m   1299\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcommand_header \u001b[38;5;241m+\u001b[39m\\\n\u001b[1;32m   1300\u001b[0m     args_command \u001b[38;5;241m+\u001b[39m\\\n\u001b[1;32m   1301\u001b[0m     proto\u001b[38;5;241m.\u001b[39mEND_COMMAND_PART\n\u001b[1;32m   1303\u001b[0m answer \u001b[38;5;241m\u003d\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgateway_client\u001b[38;5;241m.\u001b[39msend_command(command)\n\u001b[0;32m-\u003e 1304\u001b[0m return_value \u001b[38;5;241m\u003d\u001b[39m \u001b[43mget_return_value\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1305\u001b[0m \u001b[43m    \u001b[49m\u001b[43manswer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgateway_client\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtarget_id\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1307\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m temp_arg \u001b[38;5;129;01min\u001b[39;00m temp_args:\n\u001b[1;32m   1308\u001b[0m     temp_arg\u001b[38;5;241m.\u001b[39m_detach()\n\nFile \u001b[0;32m/opt/bitnami/spark/python/lib/pyspark.zip/pyspark/sql/utils.py:117\u001b[0m, in \u001b[0;36mcapture_sql_exception.\u003clocals\u003e.deco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m    113\u001b[0m converted \u001b[38;5;241m\u003d\u001b[39m convert_exception(e\u001b[38;5;241m.\u001b[39mjava_exception)\n\u001b[1;32m    114\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(converted, UnknownException):\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Hide where the exception came from that shows a non-Pythonic\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     \u001b[38;5;66;03m# JVM exception message.\u001b[39;00m\n\u001b[0;32m--\u003e 117\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m converted \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    118\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    119\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m\n\n\u001b[0;31mAnalysisException\u001b[0m: Found duplicate column(s) in the data schema: `10`"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://zeppelin.local:4040/jobs/job?id\u003d9"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712562941637_1788548983",
      "id": "paragraph_1712562941637_1788548983",
      "dateCreated": "2024-04-08 07:55:41.637",
      "dateStarted": "2024-04-08 11:02:34.362",
      "dateFinished": "2024-04-08 11:02:34.620",
      "status": "ERROR"
    },
    {
      "text": "%pyspark\nimport collections\n\nmovie_desc \u003d pd.read_csv(\"/data/movies.dat\", names\u003d[\"item_id\", \"title\", \"genres\"], delimiter\u003d\"::\", engine\u003d\"python\", encoding\u003d\"ISO-8859-1\")\n\n# Convert genres to lowercase\nmovie_desc.genres \u003d movie_desc.genres.str.lower()\n\nsplit_series \u003d movie_desc.genres.str.split(\u0027|\u0027).apply(lambda x: x)\nsplit_series_dict \u003d split_series.apply(collections.Counter)\n\nmulti_hot \u003d pd.DataFrame.from_records(split_series_dict).fillna(value\u003d0).astype(\u0027int\u0027)\n\nitem_features \u003d pd.concat([movie_desc.item_id, multi_hot], axis\u003d1)\nitem_features\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:24.936",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eitem_id\u003c/th\u003e\n      \u003cth\u003eanimation\u003c/th\u003e\n      \u003cth\u003echildren\u0027s\u003c/th\u003e\n      \u003cth\u003ecomedy\u003c/th\u003e\n      \u003cth\u003eadventure\u003c/th\u003e\n      \u003cth\u003efantasy\u003c/th\u003e\n      \u003cth\u003eromance\u003c/th\u003e\n      \u003cth\u003edrama\u003c/th\u003e\n      \u003cth\u003eaction\u003c/th\u003e\n      \u003cth\u003ecrime\u003c/th\u003e\n      \u003cth\u003ethriller\u003c/th\u003e\n      \u003cth\u003ehorror\u003c/th\u003e\n      \u003cth\u003esci-fi\u003c/th\u003e\n      \u003cth\u003edocumentary\u003c/th\u003e\n      \u003cth\u003ewar\u003c/th\u003e\n      \u003cth\u003emusical\u003c/th\u003e\n      \u003cth\u003emystery\u003c/th\u003e\n      \u003cth\u003efilm-noir\u003c/th\u003e\n      \u003cth\u003ewestern\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e...\u003c/th\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3878\u003c/th\u003e\n      \u003ctd\u003e3948\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3879\u003c/th\u003e\n      \u003ctd\u003e3949\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3880\u003c/th\u003e\n      \u003ctd\u003e3950\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3881\u003c/th\u003e\n      \u003ctd\u003e3951\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3882\u003c/th\u003e\n      \u003ctd\u003e3952\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n      \u003ctd\u003e0\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e3883 rows × 19 columns\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712562975703_1175108490",
      "id": "paragraph_1712562975703_1175108490",
      "dateCreated": "2024-04-08 07:56:15.703",
      "dateStarted": "2024-04-08 08:08:24.937",
      "dateFinished": "2024-04-08 08:08:25.144",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nitem_names \u003d movie_desc\nitem_names.head()",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:25.237",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003eitem_id\u003c/th\u003e\n      \u003cth\u003etitle\u003c/th\u003e\n      \u003cth\u003egenres\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003eToy Story (1995)\u003c/td\u003e\n      \u003ctd\u003eanimation|children\u0027s|comedy\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003eJumanji (1995)\u003c/td\u003e\n      \u003ctd\u003eadventure|children\u0027s|fantasy\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003eGrumpier Old Men (1995)\u003c/td\u003e\n      \u003ctd\u003ecomedy|romance\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003eWaiting to Exhale (1995)\u003c/td\u003e\n      \u003ctd\u003ecomedy|drama\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003eFather of the Bride Part II (1995)\u003c/td\u003e\n      \u003ctd\u003ecomedy\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563002557_1773451501",
      "id": "paragraph_1712563002557_1773451501",
      "dateCreated": "2024-04-08 07:56:42.557",
      "dateStarted": "2024-04-08 08:08:25.238",
      "dateFinished": "2024-04-08 08:08:25.445",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nunique_users \u003d interactions.user_id.nunique()\nunique_items \u003d interactions.item_id.nunique()\n\nsparsity \u003d 1 - (len(interactions) / (unique_users * unique_items))\nprint(\"interaction matrix sparsity: {}%\".format(round(100 * sparsity, 1)))",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:25.539",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "interaction matrix sparsity: 98.7%\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563012104_109093263",
      "id": "paragraph_1712563012104_109093263",
      "dateCreated": "2024-04-08 07:56:52.104",
      "dateStarted": "2024-04-08 08:08:25.540",
      "dateFinished": "2024-04-08 08:08:25.796",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nnp.random.seed(42)\ninteractions[\u0027random\u0027] \u003d np.random.random(size\u003dlen(interactions))\ntest_pct \u003d 0.25",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:25.840",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563018286_290240931",
      "id": "paragraph_1712563018286_290240931",
      "dateCreated": "2024-04-08 07:56:58.286",
      "dateStarted": "2024-04-08 08:08:25.841",
      "dateFinished": "2024-04-08 08:08:26.097",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ntrain_mask \u003d interactions[\u0027random\u0027] \u003c  (1 - test_pct)\nvalid_mask \u003d interactions[\u0027random\u0027] \u003e\u003d (1 - test_pct)\n\ninteractions_train \u003d interactions[train_mask][[\u0027user_id\u0027, \u0027item_id\u0027]]\ninteractions_valid \u003d interactions[valid_mask][[\u0027user_id\u0027, \u0027item_id\u0027]]\n\ntrain_users \u003d np.sort(interactions_train.user_id.unique())\nvalid_users \u003d np.sort(interactions_valid.user_id.unique())\ncold_start_users \u003d set(valid_users) - set(train_users)\n\ntrain_items \u003d np.sort(interactions_train.item_id.unique())\nvalid_items \u003d np.sort(interactions_valid.item_id.unique())\ncold_start_items \u003d set(valid_items) - set(train_items)\n\nprint(\"train shape: {}\".format(interactions_train.shape))\nprint(\"valid shape: {}\".format(interactions_valid.shape))\n\nprint(\"train users: {}\".format(len(train_users)))\nprint(\"valid users: {}\".format(len(valid_users)))\nprint(\"cold-start users: {}\".format(cold_start_users))\n\nprint(\"train items: {}\".format(len(train_items)))\nprint(\"valid items: {}\".format(len(valid_items)))\nprint(\"cold-start items: {}\".format(cold_start_items))\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:26.141",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "train shape: (7500733, 2)\nvalid shape: (2499321, 2)\ntrain users: 69878\nvalid users: 69854\ncold-start users: set()\ntrain items: 10642\nvalid items: 10350\ncold-start items: {39429, 64652, 6929, 61970, 64275, 58520, 3226, 7452, 6941, 62237, 64288, 38435, 62245, 6189, 63662, 64944, 5814, 7750, 7754, 8394, 3277, 59854, 56015, 60237, 62671, 63698, 63327, 7145, 59625, 53355, 65130, 8945, 64754, 3191, 60666}\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563024728_1529526548",
      "id": "paragraph_1712563024728_1529526548",
      "dateCreated": "2024-04-08 07:57:04.728",
      "dateStarted": "2024-04-08 08:08:26.143",
      "dateFinished": "2024-04-08 08:08:26.700",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nuser_features \u003d user_features[user_features.user_id.isin(train_users)]\nitem_features \u003d item_features[item_features.item_id.isin(train_items)]\nuser_features.shape, item_features.shape",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:26.743",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "((5857, 31), (3858, 19))"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563033267_751786763",
      "id": "paragraph_1712563033267_751786763",
      "dateCreated": "2024-04-08 07:57:13.267",
      "dateStarted": "2024-04-08 08:08:26.745",
      "dateFinished": "2024-04-08 08:08:26.954",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_train \u003d interactions[[\u0027user_id\u0027, \u0027item_id\u0027]]\ndf_train_total \u003d df_train.groupby(\u0027user_id\u0027)[\u0027item_id\u0027].count().reset_index(name\u003d\"total_item\")\ndf_train_total",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:27.045",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003euser_id\u003c/th\u003e\n      \u003cth\u003etotal_item\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003e22\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003e20\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003e33\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003e38\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003e87\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e...\u003c/th\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n      \u003ctd\u003e...\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e69873\u003c/th\u003e\n      \u003ctd\u003e71563\u003c/td\u003e\n      \u003ctd\u003e43\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e69874\u003c/th\u003e\n      \u003ctd\u003e71564\u003c/td\u003e\n      \u003ctd\u003e105\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e69875\u003c/th\u003e\n      \u003ctd\u003e71565\u003c/td\u003e\n      \u003ctd\u003e145\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e69876\u003c/th\u003e\n      \u003ctd\u003e71566\u003c/td\u003e\n      \u003ctd\u003e49\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e69877\u003c/th\u003e\n      \u003ctd\u003e71567\u003c/td\u003e\n      \u003ctd\u003e53\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e69878 rows × 2 columns\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563042551_357732651",
      "id": "paragraph_1712563042551_357732651",
      "dateCreated": "2024-04-08 07:57:22.551",
      "dateStarted": "2024-04-08 08:08:27.046",
      "dateFinished": "2024-04-08 08:08:27.354",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nimport matplotlib.pyplot as plt\n\ntotal_users \u003d len(df_train_total)\n\n# Create a histogram\nplt.hist(df_train_total[\u0027total_item\u0027], bins\u003d10, edgecolor\u003d\u0027black\u0027, weights\u003dnp.ones(total_users) / total_users * 100)\nplt.title(\u0027Distribution of Total Items per User\u0027)\nplt.xlabel(\u0027Total Items\u0027)\nplt.ylabel(\u0027Number of Users Percentage (%)\u0027)\nplt.show()\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:27.447",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "IMG",
            "data": "\u003d"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563048395_1939191288",
      "id": "paragraph_1712563048395_1939191288",
      "dateCreated": "2024-04-08 07:57:28.395",
      "dateStarted": "2024-04-08 08:08:27.448",
      "dateFinished": "2024-04-08 08:08:27.760",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\ndf_train_total.describe()",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:27.848",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003euser_id\u003c/th\u003e\n      \u003cth\u003etotal_item\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003ecount\u003c/th\u003e\n      \u003ctd\u003e69878.000000\u003c/td\u003e\n      \u003ctd\u003e69878.00000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emean\u003c/th\u003e\n      \u003ctd\u003e35782.217393\u003c/td\u003e\n      \u003ctd\u003e143.10733\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003estd\u003c/th\u003e\n      \u003ctd\u003e20613.909098\u003c/td\u003e\n      \u003ctd\u003e216.71258\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emin\u003c/th\u003e\n      \u003ctd\u003e1.000000\u003c/td\u003e\n      \u003ctd\u003e20.00000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e25%\u003c/th\u003e\n      \u003ctd\u003e17943.250000\u003c/td\u003e\n      \u003ctd\u003e35.00000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e50%\u003c/th\u003e\n      \u003ctd\u003e35798.500000\u003c/td\u003e\n      \u003ctd\u003e69.00000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e75%\u003c/th\u003e\n      \u003ctd\u003e53619.750000\u003c/td\u003e\n      \u003ctd\u003e156.00000\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003emax\u003c/th\u003e\n      \u003ctd\u003e71567.000000\u003c/td\u003e\n      \u003ctd\u003e7359.00000\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563603965_23376697",
      "id": "paragraph_1712563603965_23376697",
      "dateCreated": "2024-04-08 08:06:43.965",
      "dateStarted": "2024-04-08 08:08:27.849",
      "dateFinished": "2024-04-08 08:08:28.058",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n# Define the bins\nbins \u003d [0, 5, 100, 500, np.inf]\n\n# Define the labels for the bins\nlabels \u003d [\u00270-5\u0027, \u002711-100\u0027, \u0027101-500\u0027, \u0027500+\u0027]\n\n# Create a new column for the total_item ranges\ndf_train_total[\u0027total_item_range\u0027] \u003d pd.cut(df_train_total[\u0027total_item\u0027], bins\u003dbins, labels\u003dlabels)\ndf_train_total_sorted \u003d df_train_total.sort_values(by\u003d\u0027total_item_range\u0027)\n\n# Print the DataFrame to check the result\nprint(df_train_total_sorted)\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:28.149",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "       user_id  total_item total_item_range\n0            1          22           11-100\n41097    42099          51           11-100\n41098    42100          59           11-100\n41100    42102         100           11-100\n41103    42105          52           11-100\n...        ...         ...              ...\n4371      4523        1201             500+\n35892    36771        2358             500+\n14670    15061        2060             500+\n29507    30265         502             500+\n34938    35798         580             500+\n\n[69878 rows x 3 columns]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563054802_1059569088",
      "id": "paragraph_1712563054802_1059569088",
      "dateCreated": "2024-04-08 07:57:34.802",
      "dateStarted": "2024-04-08 08:08:28.151",
      "dateFinished": "2024-04-08 08:08:28.358",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n# Create a histogram\nplt.hist(df_train_total_sorted[\u0027total_item_range\u0027], bins\u003d10, edgecolor\u003d\u0027black\u0027, weights\u003dnp.ones(total_users) / total_users * 100)\nplt.title(\u0027Distribution of Total Items per User\u0027)\nplt.xlabel(\u0027Total Items\u0027)\nplt.ylabel(\u0027Number of Users Percentage (%)\u0027)\nplt.show()",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:28.451",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "IMG",
            "data": ""
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563062188_663851411",
      "id": "paragraph_1712563062188_663851411",
      "dateCreated": "2024-04-08 07:57:42.188",
      "dateStarted": "2024-04-08 08:08:28.452",
      "dateFinished": "2024-04-08 08:08:28.715",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nmodel \u003d RankFM(factors\u003d20, loss\u003d\u0027warp\u0027, max_samples\u003d20, alpha\u003d0.01, sigma\u003d0.1, learning_rate\u003d0.10)\nmodel\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:28.752",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003crankfm.rankfm.RankFM at 0x7af0d776f310\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563068538_1786378504",
      "id": "paragraph_1712563068538_1786378504",
      "dateCreated": "2024-04-08 07:57:48.538",
      "dateStarted": "2024-04-08 08:08:28.754",
      "dateFinished": "2024-04-08 08:08:28.961",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nmodel.fit(interactions\u003dinteractions_train, epochs\u003d100, verbose\u003dTrue)",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:08:29.054",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\ntraining epoch: 0\nlog likelihood: -3828258.0\n\ntraining epoch: 1\nlog likelihood: -3664688.5\n\ntraining epoch: 2\nlog likelihood: -3568424.5\n\ntraining epoch: 3\nlog likelihood: -3508176.0\n\ntraining epoch: 4\nlog likelihood: -3470621.75\n\ntraining epoch: 5\nlog likelihood: -3446178.25\n\ntraining epoch: 6\nlog likelihood: -3428323.75\n\ntraining epoch: 7\nlog likelihood: -3420049.5\n\ntraining epoch: 8\nlog likelihood: -3410039.25\n\ntraining epoch: 9\nlog likelihood: -3404298.0\n\ntraining epoch: 10\nlog likelihood: -3400721.75\n\ntraining epoch: 11\nlog likelihood: -3395557.0\n\ntraining epoch: 12\nlog likelihood: -3392118.75\n\ntraining epoch: 13\nlog likelihood: -3391550.5\n\ntraining epoch: 14\nlog likelihood: -3390118.5\n\ntraining epoch: 15\nlog likelihood: -3385657.0\n\ntraining epoch: 16\nlog likelihood: -3386058.0\n\ntraining epoch: 17\nlog likelihood: -3385676.75\n\ntraining epoch: 18\nlog likelihood: -3383209.0\n\ntraining epoch: 19\nlog likelihood: -3383090.75\n\ntraining epoch: 20\nlog likelihood: -3382199.0\n\ntraining epoch: 21\nlog likelihood: -3382538.5\n\ntraining epoch: 22\nlog likelihood: -3380611.25\n\ntraining epoch: 23\nlog likelihood: -3380318.75\n\ntraining epoch: 24\nlog likelihood: -3379588.25\n\ntraining epoch: 25\nlog likelihood: -3379113.75\n\ntraining epoch: 26\nlog likelihood: -3378770.75\n\ntraining epoch: 27\nlog likelihood: -3379280.5\n\ntraining epoch: 28\nlog likelihood: -3377408.25\n\ntraining epoch: 29\nlog likelihood: -3378647.0\n\ntraining epoch: 30\nlog likelihood: -3378541.0\n\ntraining epoch: 31\nlog likelihood: -3376733.5\n\ntraining epoch: 32\nlog likelihood: -3377142.5\n\ntraining epoch: 33\nlog likelihood: -3376961.0\n\ntraining epoch: 34\nlog likelihood: -3377755.5\n\ntraining epoch: 35\nlog likelihood: -3375716.0\n\ntraining epoch: 36\nlog likelihood: -3376266.25\n\ntraining epoch: 37\nlog likelihood: -3376094.0\n\ntraining epoch: 38\nlog likelihood: -3376787.25\n\ntraining epoch: 39\nlog likelihood: -3374444.75\n\ntraining epoch: 40\nlog likelihood: -3376197.5\n\ntraining epoch: 41\nlog likelihood: -3377714.75\n\ntraining epoch: 42\nlog likelihood: -3374946.25\n\ntraining epoch: 43\nlog likelihood: -3375611.5\n\ntraining epoch: 44\nlog likelihood: -3375871.75\n\ntraining epoch: 45\nlog likelihood: -3373803.5\n\ntraining epoch: 46\nlog likelihood: -3375008.0\n\ntraining epoch: 47\nlog likelihood: -3375701.75\n\ntraining epoch: 48\nlog likelihood: -3376600.75\n\ntraining epoch: 49\nlog likelihood: -3375182.25\n\ntraining epoch: 50\nlog likelihood: -3375569.5\n\ntraining epoch: 51\nlog likelihood: -3375380.75\n\ntraining epoch: 52\nlog likelihood: -3375935.25\n\ntraining epoch: 53\nlog likelihood: -3375329.0\n\ntraining epoch: 54\nlog likelihood: -3375604.25\n\ntraining epoch: 55\nlog likelihood: -3374977.5\n\ntraining epoch: 56\nlog likelihood: -3375195.5\n\ntraining epoch: 57\nlog likelihood: -3375544.0\n\ntraining epoch: 58\nlog likelihood: -3375407.25\n\ntraining epoch: 59\nlog likelihood: -3373855.75\n\ntraining epoch: 60\nlog likelihood: -3375976.25\n\ntraining epoch: 61\nlog likelihood: -3373808.5\n\ntraining epoch: 62\nlog likelihood: -3374692.0\n\ntraining epoch: 63\nlog likelihood: -3374828.5\n\ntraining epoch: 64\nlog likelihood: -3375690.5\n\ntraining epoch: 65\nlog likelihood: -3375730.75\n\ntraining epoch: 66\nlog likelihood: -3376039.0\n\ntraining epoch: 67\nlog likelihood: -3373529.25\n\ntraining epoch: 68\nlog likelihood: -3374231.5\n\ntraining epoch: 69\nlog likelihood: -3375275.75\n\ntraining epoch: 70\nlog likelihood: -3372764.25\n\ntraining epoch: 71\nlog likelihood: -3373952.25\n\ntraining epoch: 72\nlog likelihood: -3374982.5\n\ntraining epoch: 73\nlog likelihood: -3375369.25\n\ntraining epoch: 74\nlog likelihood: -3375243.25\n\ntraining epoch: 75\nlog likelihood: -3374527.5\n\ntraining epoch: 76\nlog likelihood: -3374650.0\n\ntraining epoch: 77\nlog likelihood: -3374467.75\n\ntraining epoch: 78\nlog likelihood: -3374260.25\n\ntraining epoch: 79\nlog likelihood: -3374381.0\n\ntraining epoch: 80\nlog likelihood: -3374981.5\n\ntraining epoch: 81\nlog likelihood: -3373319.75\n\ntraining epoch: 82\nlog likelihood: -3373696.25\n\ntraining epoch: 83\nlog likelihood: -3374046.75\n\ntraining epoch: 84\nlog likelihood: -3374864.75\n\ntraining epoch: 85\nlog likelihood: -3373866.0\n\ntraining epoch: 86\nlog likelihood: -3373907.5\n\ntraining epoch: 87\nlog likelihood: -3375257.0\n\ntraining epoch: 88\nlog likelihood: -3373959.0\n\ntraining epoch: 89\nlog likelihood: -3373711.5\n\ntraining epoch: 90\nlog likelihood: -3373883.25\n\ntraining epoch: 91\nlog likelihood: -3373865.25\n\ntraining epoch: 92\nlog likelihood: -3373719.75\n\ntraining epoch: 93\nlog likelihood: -3373674.5\n\ntraining epoch: 94\nlog likelihood: -3373901.5\n\ntraining epoch: 95\nlog likelihood: -3375423.25\n\ntraining epoch: 96\nlog likelihood: -3374569.25\n\ntraining epoch: 97\nlog likelihood: -3374792.25\n\ntraining epoch: 98\nlog likelihood: -3374839.5\n\ntraining epoch: 99\nlog likelihood: -3374371.75\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563103951_1499245696",
      "id": "paragraph_1712563103951_1499245696",
      "dateCreated": "2024-04-08 07:58:23.952",
      "dateStarted": "2024-04-08 08:08:29.055",
      "dateFinished": "2024-04-08 08:34:30.507",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nvalid_scores \u003d model.predict(interactions_valid, cold_start\u003d\u0027nan\u0027) \nprint(valid_scores.shape)\npd.Series(valid_scores).describe()\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:34:30.599",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(2499321,)\ncount    2.499274e+06\nmean     1.061945e+00\nstd      1.192589e+00\nmin     -5.676000e+00\n25%      2.167714e-01\n50%      1.057545e+00\n75%      1.891772e+00\nmax      5.076272e+00\ndtype: float64"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563114873_339797197",
      "id": "paragraph_1712563114873_339797197",
      "dateCreated": "2024-04-08 07:58:34.873",
      "dateStarted": "2024-04-08 08:34:30.600",
      "dateFinished": "2024-04-08 08:34:33.412",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\nvalid_recommendations \u003d model.recommend(valid_users, n_items\u003d10, filter_previous\u003dFalse, cold_start\u003d\u0027nan\u0027)\nvalid_recommendations.head()\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:34:33.502",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv\u003e\n\u003cstyle scoped\u003e\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\u003c/style\u003e\n\u003ctable border\u003d\"1\" class\u003d\"dataframe\"\u003e\n  \u003cthead\u003e\n    \u003ctr style\u003d\"text-align: right;\"\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e0\u003c/th\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003cth\u003e5\u003c/th\u003e\n      \u003cth\u003e6\u003c/th\u003e\n      \u003cth\u003e7\u003c/th\u003e\n      \u003cth\u003e8\u003c/th\u003e\n      \u003cth\u003e9\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003cth\u003e1\u003c/th\u003e\n      \u003ctd\u003e595\u003c/td\u003e\n      \u003ctd\u003e588\u003c/td\u003e\n      \u003ctd\u003e344\u003c/td\u003e\n      \u003ctd\u003e153\u003c/td\u003e\n      \u003ctd\u003e339\u003c/td\u003e\n      \u003ctd\u003e480\u003c/td\u003e\n      \u003ctd\u003e586\u003c/td\u003e\n      \u003ctd\u003e590\u003c/td\u003e\n      \u003ctd\u003e296\u003c/td\u003e\n      \u003ctd\u003e165\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e2\u003c/th\u003e\n      \u003ctd\u003e260\u003c/td\u003e\n      \u003ctd\u003e736\u003c/td\u003e\n      \u003ctd\u003e653\u003c/td\u003e\n      \u003ctd\u003e733\u003c/td\u003e\n      \u003ctd\u003e1356\u003c/td\u003e\n      \u003ctd\u003e1210\u003c/td\u003e\n      \u003ctd\u003e648\u003c/td\u003e\n      \u003ctd\u003e780\u003c/td\u003e\n      \u003ctd\u003e786\u003c/td\u003e\n      \u003ctd\u003e494\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e3\u003c/th\u003e\n      \u003ctd\u003e6539\u003c/td\u003e\n      \u003ctd\u003e3996\u003c/td\u003e\n      \u003ctd\u003e4993\u003c/td\u003e\n      \u003ctd\u003e4963\u003c/td\u003e\n      \u003ctd\u003e1246\u003c/td\u003e\n      \u003ctd\u003e6377\u003c/td\u003e\n      \u003ctd\u003e7153\u003c/td\u003e\n      \u003ctd\u003e5445\u003c/td\u003e\n      \u003ctd\u003e4246\u003c/td\u003e\n      \u003ctd\u003e1704\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e4\u003c/th\u003e\n      \u003ctd\u003e296\u003c/td\u003e\n      \u003ctd\u003e590\u003c/td\u003e\n      \u003ctd\u003e595\u003c/td\u003e\n      \u003ctd\u003e480\u003c/td\u003e\n      \u003ctd\u003e344\u003c/td\u003e\n      \u003ctd\u003e592\u003c/td\u003e\n      \u003ctd\u003e356\u003c/td\u003e\n      \u003ctd\u003e457\u003c/td\u003e\n      \u003ctd\u003e454\u003c/td\u003e\n      \u003ctd\u003e150\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003cth\u003e5\u003c/th\u003e\n      \u003ctd\u003e608\u003c/td\u003e\n      \u003ctd\u003e17\u003c/td\u003e\n      \u003ctd\u003e1225\u003c/td\u003e\n      \u003ctd\u003e296\u003c/td\u003e\n      \u003ctd\u003e593\u003c/td\u003e\n      \u003ctd\u003e509\u003c/td\u003e\n      \u003ctd\u003e25\u003c/td\u003e\n      \u003ctd\u003e150\u003c/td\u003e\n      \u003ctd\u003e590\u003c/td\u003e\n      \u003ctd\u003e36\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563171538_796814290",
      "id": "paragraph_1712563171538_796814290",
      "dateCreated": "2024-04-08 07:59:31.538",
      "dateStarted": "2024-04-08 08:34:33.503",
      "dateFinished": "2024-04-08 08:35:39.826",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n%%time\nk\u003d20\n\nmodel_hit_rate \u003d hit_rate(model, interactions_valid, k\u003dk)\nmodel_reciprocal_rank \u003d reciprocal_rank(model, interactions_valid, k\u003dk)\nmodel_dcg \u003d discounted_cumulative_gain(model, interactions_valid, k\u003dk)\nmodel_precision \u003d precision(model, interactions_valid, k\u003dk)\nmodel_recall \u003d recall(model, interactions_valid, k\u003dk)\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:35:39.843",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "CPU times: user 5min 57s, sys: 491 ms, total: 5min 58s\nWall time: 5min 58s\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563188627_733978610",
      "id": "paragraph_1712563188627_733978610",
      "dateCreated": "2024-04-08 07:59:48.627",
      "dateStarted": "2024-04-08 08:35:39.844",
      "dateFinished": "2024-04-08 08:41:38.231",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2024-04-08 08:41:38.262",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1712563262620_579622933",
      "id": "paragraph_1712563262620_579622933",
      "dateCreated": "2024-04-08 08:01:02.620",
      "dateStarted": "2024-04-08 08:41:38.264",
      "dateFinished": "2024-04-08 08:41:38.471",
      "status": "FINISHED"
    }
  ],
  "name": "RankFM-Eval_spark",
  "id": "2JU82EVB8",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.1",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}